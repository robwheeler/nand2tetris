// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Or(a=instruction[15], b=false, out=cInstruction);
    Or(a=instruction[5], b=false, out=storeA);
    Or(a=instruction[4], b=false, out=storeD);
    Or(a=instruction[3], b=false, out=storeM);

    Mux16(a=instruction, b=tmpM, sel=cInstruction, out=tA);

    Not(in=cInstruction, out=aInstruction);
    Or(a=aInstruction, b=storeA, out=loadA);

    ARegister(in=tA, out=A, out[0..14]=addressM, load=loadA);

    And(a=cInstruction, b=instruction[12], out=AorM);
    Mux16(a=A, b=inM, sel=AorM, out=AM);

    ALU(x=D, y=AM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=tmpM,
        out=outM,
        zr=zero,
        ng=negative);

    And(a=cInstruction, b=storeD, out=loadD);
    DRegister(in=tmpM, load=loadD, out=D);

    And(a=cInstruction, b=storeM, out=writeM);

    Not(in=negative, out=positive);
  	Not(in=zero, out=nonzero);
  	And(a=cInstruction, b=instruction[0], out=JGT);
  	And(a=positive, b=nonzero, out=positiveNonzero);
  	And(a=JGT, b=positiveNonzero, out=loadJGT);

  	And(a=cInstruction, b=instruction[1], out=JEQ);
  	And(a=JEQ, b=zero, out=loadJEQ);

  	And(a=cInstruction, b=instruction[2], out=JLT);
  	And(a=JLT, b=negative, out=loadJLT);

  	Or(a=loadJGT, b=loadJEQ, out=loadGTE);
  	Or(a=loadGTE, b=loadJLT, out=pcLoad);

  	PC(in=A, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);
}
